---
- name: Bootstrap dev environment
  hosts: localhost
  become: false
  gather_facts: true

  vars:
    brew_packages:
      - git
      - neovim
      - tmux
      - fzf
      - ripgrep

  tasks:
    # --- Detect OS and set brew prefix ---
    - name: Set brew prefix for macOS ARM (Apple Silicon)
      ansible.builtin.set_fact:
        brew_prefix: "/opt/homebrew"
      when: ansible_os_family == "Darwin" and ansible_machine == "arm64"

    - name: Set brew prefix for macOS Intel
      ansible.builtin.set_fact:
        brew_prefix: "/usr/local"
      when: ansible_os_family == "Darwin" and ansible_machine == "x86_64"

    - name: Set brew prefix for Linux
      ansible.builtin.set_fact:
        brew_prefix: "/home/linuxbrew/.linuxbrew"
      when: ansible_os_family != "Darwin"

    - name: Set brew binary path
      ansible.builtin.set_fact:
        brew_bin: "{{ brew_prefix }}/bin/brew"

    - name: Set tmux config path
      ansible.builtin.set_fact:
        tmux_path: "~/.tmux.conf"

    # --- Ensure dependencies for Homebrew (Linux only) ---
    - name: Ensure build dependencies are installed (Linux)
      ansible.builtin.package:
        name:
          - build-essential
          - curl
          - file
          - git
        state: present
      become: true
      when: ansible_os_family != "Darwin"

    # --- Install Homebrew if missing ---
    - name: Check if Homebrew is installed
      ansible.builtin.stat:
        path: "{{ brew_bin }}"
      register: brew_check

    - name: Install Homebrew if not present
      ansible.builtin.shell: |
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      when: not brew_check.stat.exists
      args:
        executable: /bin/bash
      environment:
        NONINTERACTIVE: "1"

    # --- Setup environment for brew ---
    - name: Ensure brew environment is loaded for subsequent tasks
      ansible.builtin.shell: |
        eval "$({{ brew_bin }} shellenv)"
        echo "export PATH=$(brew --prefix)/bin:$(brew --prefix)/sbin:$PATH" >> ~/.bashrc
        echo "export HOMEBREW_NO_ENV_HINTS=1" >> ~/.bashrc
      changed_when: false

    # --- Install packages with detailed output ---
    - name: Install packages via Homebrew
      ansible.builtin.shell: |
        set -e
        eval "$({{ brew_bin }} shellenv)"
        changed=0
        for pkg in {{ brew_packages | join(' ') }}; do
          if ! brew list --versions "$pkg" >/dev/null 2>&1; then
            echo ">>> Installing $pkg..."
            brew install "$pkg" || echo "⚠️  Warning installing $pkg"
            changed=1
          else
            echo "✅ $pkg already installed"
          fi
        done
        exit 0
      register: brew_install
      changed_when: "'Installing' in brew_install.stdout"
      failed_when: false # ignore ARM64 warnings, only fail on real errors

    - name: Print brew install logs
      ansible.builtin.debug:
        var: brew_install.stdout_lines

    # --- Verify everything works ---
    - name: Verify key binaries
      ansible.builtin.shell: |
        eval "$({{ brew_bin }} shellenv)"
        which nvim && which tmux && which fzf && which rg
      register: verify_cmds
      changed_when: false
      failed_when: verify_cmds.rc != 0

    - name: Show verification results
      ansible.builtin.debug:
        var: verify_cmds.stdout_lines

    # --- Install LazyVim starter ---
    - name: Check if nvim config exists
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/.config/nvim"
      register: nvim_config

    - name: Backup existing nvim config
      ansible.builtin.command:
        cmd: "mv {{ ansible_env.HOME }}/.config/nvim {{ ansible_env.HOME }}/.config/nvim.bak"
      when: nvim_config.stat.exists
      ignore_errors: false

    - name: Clone LazyVim starter
      ansible.builtin.git:
        repo: https://github.com/LazyVim/starter
        dest: "{{ ansible_env.HOME }}/.config/nvim"
        version: main
        force: false

    - name: Remove .git folder from LazyVim starter
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.config/nvim/.git"
        state: absent

    - name: LazyVim installation complete
      ansible.builtin.debug:
        msg: "✅ LazyVim starter installed to ~/.config/nvim"

    - name: Check if tmux config exists
      ansible.builtin.stat:
        path: "{{ tmux_path }}"
      register: tmux_config

    - name: Create tmux config if it does not exist
      ansible.builtin.command:
        cmd: "touch {{ tmux_path }}"
      when: not tmux_config.stat.exists
      ignore_errors: false

    - name: Symlink tmux config to .config/nvim/tmux.conf
      ansible.builtin.command:
        cmd: "ln -s {{ tmux_path }} ~/.config/nvim/tmux.conf"
